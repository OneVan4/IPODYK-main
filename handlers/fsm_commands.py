from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext

from data.database import Database
from handlers.price_tracker import PriceTracker
from keyboards.reply import main_menu, rmk
from keyboards.builders import generator
from utils.states import Add, Remove

router = Router()
pt = PriceTracker()
db = Database("data/products.db")

#–æ—Ç–º–µ–Ω–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.message(F.text.lower() == "üñ•Ô∏è –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: Message, state: FSMContext):
    await state.set_state(Add.link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:",
                         reply_markup=generator("‚ùå –û—Ç–º–µ–Ω–∞"))

@router.message(Add.link, F.text)
async def link_product(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    data = await state.get_data()
    await state.clear()

    #–¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏

    product_id = await db.add_product(data["link"], message.from_user.id)
    if product_id:
        await message.reply(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. ID: {hbold(product_id)}",
                            reply_markup=main_menu)
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Add.link, ~F.text)
async def inc_link_product(message: Message, state: FSMContext):
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                         reply_markup=generator("‚ùå –û—Ç–º–µ–Ω–∞"))


#—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.message(F.text.lower() == "‚úÇÔ∏è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def rem_product(message: Message, state: FSMContext):
    await state.set_state(Remove.id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≤–∞—Äa:",
                         reply_markup=generator("‚ùå –û—Ç–º–µ–Ω–∞"))

@router.message(Remove.id, F.text)
async def id_rem_product(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    data = await state.get_data()
    await state.clear()

    if await db.remove_product(data["id"], message.chat.id):
        await message.reply(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {hbold(data["id"])} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Remove.id, ~F.text)
async def inc_id_rem_product(message: Message, state: FSMContext):
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                         reply_markup=generator("‚ùå –û—Ç–º–µ–Ω–∞"))
    

#–ª–∏—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
@router.message(F.text.lower() == "üóíÔ∏è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã")
async def add_product(message: Message):
    products = await db.get_user_products(message.from_user.id)
    if not products:
        await message.reply("üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
    else:
        response = "üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        for p in products:
            response += f"ID: {hbold(p['id'])}, URL: {p['url']}, –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {hbold(p['price'])} ‚ÇΩ\n"
        await message.reply(response)



